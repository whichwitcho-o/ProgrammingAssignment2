setwd("~/R")
x <- vector("numeric", length=10)
hist(x)
head(est_1)
n <- 5
est_1 <- vector("numeric", length = 10000)
est_2 <- vector("numeric", length = 10000)
est_3 <- vector("numeric", length = 10000)
for(i in 1:10000) {
set.seed(i)
x <- sample(1:357, n)
est_1[i] <- 2*mean(x)
est_2[i] <- mean(x) + 3 * sd(x)
est_3[i] <- ((n+1)/n) * max(x)
}
head(est_1)
x <- sample(1:357, n)
x
mean(x)
set.seed(1)
x <- sample(1:357, n)
x
mean(x)
x*mean(x)
2*mean(x)
22*23.9
525.8*20.9*23.8*25*24*21.7*23.8*22.8*23.1*23.1*23.5*23*23
2^2
2^3
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((factorial(x-1))^14)*(323.6^(14*x))}
optim(1, f)$par
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((factorial(x-1))^14)*(323.6^(14*x))}
optimize(1, f)$par
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((factorial(x-1))^14)*(323.6^(14*x))}
optim(500, f)$par
gamma(2)
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((gamma(x))^14)*(323.6^(14*x))}
xmax <- optimize(f, c(0, inf))
f <- function(x) {-1*((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((gamma(x))^14)*(323.6^(14*x))}
xmax <- optimize(f, c(0, 600))
xmax
warnings()
f <- function(x) {((14*x)^(14*x))*((1.225784e+19)^(x-1))*exp(-14*x)/((gamma(x))^14)*(323.6^(14*x))}
xmax <- optimize(f, c(500, 600), maximum = T)
xmax
323.6/(14*599.99)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
data1 <- read.csv("specdata/001.csv")
data1[1]
class(data1)
data1$1
data1$"1"
head(data1)
data1$Data
data1$Date
x <- data.frame(num=1:4, bar=c(34, NA, 22, NA))
x
complete.cases(x)
is.na(x)
help(count)
vec <- complete.cases(x)
x[vec]
x[vec, ]
nrow(x[vec, ])
files_full <- list.files(specdata, full.names=TRUE)
files_full <- list.files("specdata", full.names=TRUE)
files_full[1]
x <- read.csv(files_full[1])
dat <- data.frame(id=i, nobs=nrow(x[complete.cases(data), ]))
dat <- data.frame(id=1, nobs=nrow(x[complete.cases(data), ]))
y <- c()
y
y[1] <- nrow(x[complete.cases(x)])
nrow(x[complete.cases(x)])
x[complete.cases(x)]
complete.cases(x)
x[complete.cases(x)]
data1
data1 <- data.frame(1:4, c(23, NA, 2, NA))
data1
data1[complete.cases(data1)]
x[complete.cases(x), ]
nrow(x[complete.cases(x), ])
y
y[1] <- nrow(x[complete.cases(x), ])
y
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
x <- read.csv(files_full[i])
num <- c()
for (j in length(iid)) {
num[j] <- nrow(x[complete.cases(x), ])
}
dat <- data.frame(id=iid, nobs=num)
dat
}
complete("specdata", 1)
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
num <- c()
for (i in iid) {
j <- 1
x <- read.csv(files_full[i])
num[j] <- nrow(x[complete.cases(x), ])
j <- j+1
}
data.frame(id=iid, nobs=num)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
length(c(2, 4, 8, 10, 12))
num <- vector("numeric", length=length(c(2, 4, 8, 10, 12))
num <- vector("numeric", length=length(c(2, 4, 8, 10, 12))
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
num <- vector("numeric", length=length(iid))
for (i in iid) {
j <- 1
x <- read.csv(files_full[i])
num[j] <- nrow(x[complete.cases(x), ])
j <- j+1
}
data.frame(id=iid, nobs=num)
}
complete("specdata", c(2, 4, 8, 10, 12))
x <- 1
x <- x+1
x
complete <- function(dir, iid=1:332) {
files_full <- list.files(dir, full.names=TRUE)
num <- vector("numeric", length=length(iid))
j <- 1
for (i in iid) {
x <- read.csv(files_full[i])
num[j] <- nrow(x[complete.cases(x), ])
j <- j+1
}
data.frame(id=iid, nobs=num)
}
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25
complete("specdata", 30:25)
complete("specdata", 3)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
x <- mtcars[1:3]
x
y <- mtcars[4:6]
head(y)
cor(x,y)
comp <- complete("specdata", 1:332)
comp1 <- subset(comp, comp$nobs > 150)
head(comp1)
nrow(comp1)
x <- read.csv(files_full[2])
head(x)
cor(x$sulfate, x$nitrate, use="complete")
corr <- function(dir, threshold=0) {
comp <- complete(dir, 1:332)
comp1 <- subset(comp, comp$nobs > threshlod)
corres <- vector("numeric", length=nrow(comp1))
j <- 1
for (no in comp1$id) {
files_full <- list.files(dir, full.names=TRUE)
x <- read.csv(files_full[no])
corres[j] <- cor(x$sulfate, x$nitrate, use="complete")
j <- j+1
}
corres
}
cr <- corr("specdata", 150)
corr <- function(dir, threshold=0) {
comp <- complete(dir, 1:332)
comp1 <- subset(comp, comp$nobs > threshold)
corres <- vector("numeric", length=nrow(comp1))
j <- 1
for (no in comp1$id) {
files_full <- list.files(dir, full.names=TRUE)
x <- read.csv(files_full[no])
corres[j] <- cor(x$sulfate, x$nitrate, use="complete")
j <- j+1
}
corres
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
cr <- corr("specdata")
length(cr)
submit()
submit()
submit()
## The following functions are created to create a special object that sotres a matrix and
## cache its inverse.
##
## The first function creates a special "matrix" object, which is a list containing a function
## to set the matrix, get the matrix, set the inverse, and get the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by the function above.
## If the inverse has already been calculated (and the matrix has not changed), then this
## function shoud retrieve the inverse from the cache. Otherwise, it calculates the inverse
## and sets it in the cache
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
matrix <- x$get()
i <- solve(matrix)
x$setinverse(i)
i
}
m <- matrix(1:6, nrow =2, ncol=3)
solve(m)
m <- matrix(1:4, nrow =2, ncol=2)
solve(m)
cachesolve(m)
setwd("C:/Users/Amber/ProgrammingAssignment2")
## The following functions are created to create a special object that sotres a matrix and
## cache its inverse.
##
## The first function creates a special "matrix" object, which is a list containing a function
## to set the matrix, get the matrix, set the inverse, and get the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by the function above.
## If the inverse has already been calculated (and the matrix has not changed), then this
## function shoud retrieve the inverse from the cache. Otherwise, it calculates the inverse
## and sets it in the cache
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
matrix <- x$get()
i <- solve(matrix)
x$setinverse(i)
i
}
m <- matrix(1:4, nrow =2, ncol=2)
cachesolve(m)
cacheSolve(m)
## The following functions are created to create a special object that sotres a matrix and
## cache its inverse.
##
## The first function creates a special "matrix" object, which is a list containing a function
## to set the matrix, get the matrix, set the inverse, and get the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by the function above.
## If the inverse has already been calculated (and the matrix has not changed), then this
## function shoud retrieve the inverse from the cache. Otherwise, it calculates the inverse
## and sets it in the cache
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(m)
m[ , ]
## The following functions are created to create a special object that sotres a matrix and
## cache its inverse.
##
## The first function creates a special "matrix" object, which is a list containing a function
## to set the matrix, get the matrix, set the inverse, and get the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i[ , ]
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by the function above.
## If the inverse has already been calculated (and the matrix has not changed), then this
## function shoud retrieve the inverse from the cache. Otherwise, it calculates the inverse
## and sets it in the cache
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(m)
